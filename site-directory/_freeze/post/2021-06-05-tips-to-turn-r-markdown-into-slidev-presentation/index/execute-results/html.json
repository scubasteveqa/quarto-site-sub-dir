{
  "hash": "e66476916b2dfc53aed19ec14815898d",
  "result": {
    "markdown": "---\ntitle: \"Tips To Turn R Markdown Into Slidev Presentation\"\ndescription: |\n  Slidev is a tool to create slides from Markdown. This post is about some tips\n  to use it in combination with R Markdown.\nauthor: Hiroaki Yutani\ncategories:\n  - R Markdown\n  - Slidev\ndate: \"2021-06-05\"\nformat:\n  html:\n    toc: true\n    toc-title: \"Contents\"\n    toc-location: left\nimage: \"./images/slide.jpeg\"\n---\n\n\n[Slidev](https://sli.dev) is a tool to create slides from Markdown. Recently, I used this with R Markdown and it was generally comfortable to use.\n\n![Slides: <https://tokyor92-slides-rust-and-r.vercel.app/>](./images/slide.jpeg){width=\"80%\"}\n\nThat said, there were some points I needed to google around to find solutions, so let me share these in this post.\n\n(You might wonder what this presentation talks about R and Rust, but the contents are all in Japanese, sorry. I'm preparing another blog post for this, so stay tuned!)\n\n## Getting started\n\nFirst of all, we need to create a project that has Slidev installed. This is done by:\n\n``` sh\nnpm init slidev\n```\n\nThen, you'll be asked several questions:\n\n``` console\n❯ npm init slidev\nnpx: installed 22 in 3.269s\n\n  ●■▲\n  Slidev Creator  v0.19.6\n\n✔ Project name: … slidev-rmarkdown-test\n  Scaffolding project in slidev-rmarkdown-test ...\n  Done.\n\n✔ Install and start it now? … yes\n✔ Choose the agent › npm\n[ .................] / fetchMetadata: sill pacote version manifest for @nodelib/fs.scandir@2.1.5 fetched in 2883ms\n```\n\n`Project name` will be the directory name of the new project, so choose a name that doesn't exist yet.\n\nAfter finishing the installation, a web browser is launched and displays the template slides. These slides are generated from `slides.md` by a local Node.js server. `slides.md` is located in the top directory of the project created right now.\n\n``` console\n❯ tree -L 1 slidev-rmarkdown-test\nslidev-rmarkdown-test\n|-- README.md\n|-- components\n|-- netlify.toml\n|-- node_modules\n|-- package-lock.json\n|-- package.json\n|-- slides.md\n`-- vercel.json\n\n2 directories, 6 files\n```\n\nSo, what we should do next is obvious; let's place `slides.Rmd` in the same directory so that we can render it to overwrite `slides.md`. The Node.js server detects the change on `slides.md` and regenerates slides from it on the fly.\n\nWe can stop the server with Ctrl+C on console. To launch again, execute this:\n\n``` sh\nnpm run dev\n```\n\n## Choose `md_document`\n\nFirst of all, the target we want to generate is a Markdown file, so let's specify `md_document` as the `output`.\n\n``` yaml\n---\n# R Markdown metadata\ntitle: R Markdown to Slidev\noutput:\n  md_document:\n    variant: \"markdown_github\"\n---\n```\n\n## Preserve YAML front-matter\n\nWhat's a bit tricky here is that Slidev also uses YAML front-matter for defining metadata. So, we need to put both items for R Markdown and those for Slidev together, and preserve it after rendering. Let's specify `preserve_yaml: true`.\n\n``` yaml\n---\n...\n  md_document:\n    variant: \"markdown_github\"\n    preserve_yaml: true\n---\n```\n\nThen, put settings for Slidev. There might be some name collision between R Markdown and Slidev, but I don't find it yet, fortunately. The full YAML would be like this:\n\n``` yaml\n---\n# R Markdown metadata\ntitle: R Markdown to Slidev\noutput:\n  md_document:\n    variant: \"markdown_github\"\n    preserve_yaml: true\n\n# Slidev metadata\ntheme: seriph\nbackground: ./images/top.gif\nclass: 'text-center'\nhighlighter: shiki\ninfo: |\n  ## Use Slidev with R Markdown\n  \n  Source code can be found on <https://github.com/yutannihilation/slidev-rmarkdown>.\n---\n```\n\n## Per-slide YAML Front-matter\n\nOne of the great things with Slidev is that it's very customizable. Per-slide YAML Front-matter is a good example of this; for example, we can specify `layout` per slide like this (`image` is a specific parameter for `image-right` layout):\n\n``` md\n---\nlayout: image-right\nimage: './images/image.png'\n---\n```\n\nThis will generate a slide like this:\n\n![slides](./images/slide1.png)\n\nBut, the problem is, R Markdown (or probably underlying Pandoc?) seems to allow only one YAML front-matter. So, if we simply write\n\n``` md\n---\nlayout: image-right\nimage: './images/image.png'\n---\n```\n\nit will just disappear, alas... What can we do??\n\nWell, we can use [Pandoc's raw attribute](https://pandoc.org/MANUAL.html#generic-raw-attribute) to bypass the unnecessary conversion.\n\n```` md\n```{=html}\n---\nlayout: image-right\nimage: './images/image.png'\n---\n```\n````\n\n## Setting Base URL\n\nThe `base.url` chunk option must be specified, otherwise the generated images will be broken. If the slides will be served on the root path (`/`), the setting should be like this:\n\n```` md\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_knit$set(base.url = \"/\")\n```\n:::\n````\n\nFor another example, if the presentation is served under some path like `/slides/presentation1`, then the `base.url` should be like this:\n\n```` md\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_knit$set(base.url = \"/slides/presentation1/\")\n```\n:::\n````\n\n## Add blank lines between custom tags\n\nSlidev provides some custome tags. For example, `<v-click>` is a tag to apply annimations (c.f. <https://sli.dev/guide/animations.html>). But, for unknown reason, this won't work (I don't find the reason yet, but I think something is happening in conversions by Pandoc):\n\n``` md\n<v-click>\n* item1\n</v-click>\n<v-click>\n* item2\n</v-click>\n```\n\nIt seems we need to insert blank lines between the tags.\n\n``` md\n<v-click>\n\n* item1\n\n</v-click>\n\n<v-click>\n\n* item2\n\n</v-click>\n```\n\n## Deploy to GitHub Pages\n\nSlidev needs Node.js server to serve the slides, but it can also be exported as an standalone single-page application by the following command:\n\n``` sh\nnpm run build\n```\n\nThe generated result goes to `dist/`, which can be deployed to GitHub Pages.\n\nSlidev also provides PDF export. For more details, please refer to [the official document](https://sli.dev/guide/exporting.html#single-page-application-spa).\n\n## Limitations\n\nWhile Slidev has many cool features, I doubt it can be an R package like revealjs or xaringan, as Slidev requires Node.js to build or run, which is not very portable. So, I'm not sure how useful this post is to R users, but hope you enjoy!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}