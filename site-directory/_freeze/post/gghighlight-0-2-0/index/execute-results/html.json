{
  "hash": "561291f49dea4caf5bb87253c87fcaec",
  "result": {
    "markdown": "---\ntitle: gghighlight 0.2.0\ndescription: |\n  gghighlight 0.2.0 is released!\nauthor: 'Hiroaki Yutani'\ndate: '2020-02-17'\ncategories:\n  - gghighlight\n  - ggplot2\n  - package\nformat:\n  html:\n    toc: true\n    toc-title: \"Contents\"\n    toc-location: left\n---\n\n\n[gghighlight 0.2.0](https://yutannihilation.github.io/gghighlight/news/index.html#gghighlight-020) is on CRAN a while ago. This post briefly introduces the three new features. For basic usages, please refer to \"[Introduction to gghighlight](https://yutannihilation.github.io/gghighlight/articles/gghighlight.html)\".\n\n## `keep_scales`\n\nTo put it simply, gghighlight doesn't drop any data points but drops their colours. This means, while non-colour scales (e.g. `x`, `y` and `size`) are kept as they are, colour scales get shrinked. This might be inconvenient when we want to compare the original version and the highlighted version, or the multiple highlighted versions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gghighlight)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n```{.r .cell-code}\nlibrary(patchwork)\n\nset.seed(3)\n\nd <- data.frame(\n  value = 1:9,\n  category = rep(c(\"a\",\"b\",\"c\"), 3),\n  cont_var = runif(9),\n  stringsAsFactors = FALSE\n)\n\np <- ggplot(d, aes(x = category, y = value, color = cont_var)) +\n  geom_point(size = 10) +\n  scale_colour_viridis_c()\n\np1 <- p + ggtitle(\"original\")\np2 <- p + \n  gghighlight(dplyr::between(cont_var, 0.3, 0.7),\n              use_direct_label = FALSE) +\n  ggtitle(\"highlighted\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Tried to calculate with group_by(), but the calculation failed.\nFalling back to ungrouped filter operation...\n```\n:::\n\n```{.r .cell-code}\np1 * p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/keep_scale-1.png){width=672}\n:::\n:::\n\n\nYou can see the colour of the points are different between the left plot and the right plot because the scale of the colours are different. In such a case, you can specify `keep_scale = TRUE` to keep the original scale (under the hood, gghighlight simply copies the original data to `geom_blank()`).\n\n\n::: {.cell preview='true'}\n\n```{.r .cell-code}\np3 <- p +\n  gghighlight(dplyr::between(cont_var, 0.3, 0.7),\n              keep_scales = TRUE,\n              use_direct_label = FALSE) +\n  ggtitle(\"highlighted (keep_scale = TRUE)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Tried to calculate with group_by(), but the calculation failed.\nFalling back to ungrouped filter operation...\n```\n:::\n\n```{.r .cell-code}\np1 * p3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/keep_scale2-1.png){width=672}\n:::\n:::\n\n\n## `calculate_per_facet`\n\nWhen used with `facet_*()`, `gghighlight()` puts unhighlighted data on all facets and calculate the predicates on the whole data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setlocale(locale = \"C\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C\"\n```\n:::\n\n```{.r .cell-code}\nset.seed(16)\n\nd <- tibble::tibble(\n  day = rep(as.Date(\"2020-01-01\") + 0:89, times = 4),\n  month = lubridate::ceiling_date(day, \"month\"),\n  value = c(\n    cumsum(runif(90, -1.0, 1.0)),\n    cumsum(runif(90, -1.1, 1.1)),\n    cumsum(runif(90, -1.1, 1.0)),\n    cumsum(runif(90, -1.0, 1.1))\n  ),\n  id = rep(c(\"a\", \"b\", \"c\", \"d\"), each = 90)\n)\n\np <- ggplot(d) +\n  geom_line(aes(day, value, colour = id)) +\n  facet_wrap(~ month, scales = \"free_x\")\n\np + \n  gghighlight(mean(value) > 0, keep_scales = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nlabel_key: id\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/calculate_per_facet1-1.png){width=672}\n:::\n:::\n\n\nBut, it sometimes feels better to highlight facet by facet. For such a need, `gghighlight()` now has a new argument `calculate_per_facet`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + \n  gghighlight(mean(value) > 0,\n              calculate_per_facet = TRUE,\n              keep_scales = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nlabel_key: id\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/calculate_per_facet2-1.png){width=672}\n:::\n:::\n\n\nNote that, as a general rule, only the layers **before** adding `gghighlight()` are modified. So, if you add facet\\_\\*() after adding gghighlight(), this option doesn't work (though this behaviour might also be useful in some cases).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(d) +\n  geom_line(aes(day, value, colour = id)) +\n  gghighlight(mean(value) > 0,\n              calculate_per_facet = TRUE,\n              keep_scales = TRUE) +\n  facet_wrap(~ month, scales = \"free_x\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nlabel_key: id\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/calculate_per_facet3-1.png){width=672}\n:::\n:::\n\n\n## `unhighlighted_params`\n\n`gghighlight()` now allows users to override the parameters of unhighlighted data via `unhighlighted_params`. This idea was suggested by [\\@ClausWilke](https://twitter.com/ClausWilke/status/1014529225402003456).\n\n<blockquote class=\"twitter-tweet\">\n\n<p lang=\"en\" dir=\"ltr\">\n\nI *think* you could support a broader set of use cases if you allowed a list of aesthetics default values, like `bleach_aes = list(colour = &quot;grey40&quot;, fill =&quot;grey80&quot;, size = 0.2)`.\n\n</p>\n\n--- Claus Wilke (@ClausWilke) <a href=\"https://twitter.com/ClausWilke/status/1014529225402003456?ref_src=twsrc%5Etfw\">July 4, 2018</a>\n\n</blockquote>\n\n\n```{=html}\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\nTo illustrate the original motivation, let's use an example on [the ggridges' vignette](https://cran.r-project.org/web/packages/ggridges/vignettes/gallery.html). gghighlight can highlight almost any Geoms, but it doesn't mean it can \"unhighlight\" arbitrary colour aesthetics automatically. In some cases, you need to unhighlight them manually. For example, `geom_density_ridges()` has `point_colour`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(gghighlight)\nlibrary(ggridges)\n\np <- ggplot(Aus_athletes, aes(x = height, y = sport, color = sex, point_color = sex, fill = sex)) +\n  geom_density_ridges(\n    jittered_points = TRUE, scale = .95, rel_min_height = .01,\n    point_shape = \"|\", point_size = 3, size = 0.25,\n    position = position_points_jitter(height = 0)\n  ) +\n  scale_y_discrete(expand = c(0, 0)) +\n  scale_x_continuous(expand = c(0, 0), name = \"height [cm]\") +\n  scale_fill_manual(values = c(\"#D55E0050\", \"#0072B250\"), labels = c(\"female\", \"male\")) +\n  scale_color_manual(values = c(\"#D55E00\", \"#0072B2\"), guide = \"none\") +\n  scale_discrete_manual(\"point_color\", values = c(\"#D55E00\", \"#0072B2\"), guide = \"none\") +\n  coord_cartesian(clip = \"off\") +\n  guides(fill = guide_legend(\n    override.aes = list(\n      fill = c(\"#D55E00A0\", \"#0072B2A0\"),\n      color = NA, point_color = NA)\n    )\n  ) +\n  ggtitle(\"Height in Australian athletes\") +\n  theme_ridges(center = TRUE)\n\np + \n  gghighlight(sd(height) < 5.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 2.8\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 2.23\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unhighlighted_params1-1.png){width=672}\n:::\n:::\n\n\nYou should notice that these vertical lines still have their colours. To grey them out, we can specify `point_colour = \"grey80\"` on `unhighlighted_params` (Be careful, `point_color` doesn't work...).\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + \n  gghighlight(sd(height) < 5.5, \n              unhighlighted_params = list(point_colour = \"grey80\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 2.8\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 2.23\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unhighlighted_params2-1.png){width=672}\n:::\n:::\n\n\n`unhighlighted_params` is also useful when you want more significant difference between the highlighted data and unhighligted ones. In the following example, `size` and `colour` are set differently.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2)\nd <- purrr::map_dfr(\n  letters,\n  ~ data.frame(\n      idx = 1:400,\n      value = cumsum(runif(400, -1, 1)),\n      type = .,\n      flag = sample(c(TRUE, FALSE), size = 400, replace = TRUE),\n      stringsAsFactors = FALSE\n    )\n)\n\nggplot(d) +\n  geom_line(aes(idx, value, colour = type), size = 5) +\n  gghighlight(max(value) > 19,\n              unhighlighted_params = list(size = 1, colour = alpha(\"pink\", 0.4)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nsize aesthetic has been deprecated for use with lines as of ggplot2 3.4.0\ni Please use linewidth aesthetic instead\nlabel_key: type\n\nThis message is displayed once every 8 hours.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unhighlighted_params3-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}