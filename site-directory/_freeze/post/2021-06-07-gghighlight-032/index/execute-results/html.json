{
  "hash": "f17ed5ab50ea2402bb90982d8661ec82",
  "result": {
    "markdown": "---\ntitle: \"gghighlight 0.3.2\"\ndescription: ''\nauthor: Hiroaki Yutani\ndate: 2021-06-07\ncategories: [gghighlight, ggplot2, R package]\nformat:\n  html:\n    toc: true\n    toc-title: \"Contents\"\n    toc-location: left\nimage: \"thumbnail.png\"\n---\n\n\n\n\n[gghighlight](https://yutannihilation.github.io/gghighlight/index.html) 0.3.2 is on CRAN now!\n\nThis release is mainly for fixing the potential test failures with upcoming version of ggplot2, but this version contains two new features.\n\n## `n()`\n\nSince gghighlight uses dplyr inside, you can now use dplyr's expression, `n()`. This is useful to highlight based on the size of the group.\n\nSuppose we have this data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gghighlight)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr, warn.conflicts = FALSE)\n\nset.seed(1098)\ncenters <- tibble(\n  id = sample(letters, 11),\n  x = c(-1, -2, -3,   0,  1,  4,  2,  5,  7,  1, -1),\n  y = c( 4, -3, -7, -10, -8, -3,  9,  5, -1,  1, -1),\n  n = c(50, 50, 100, 50, 50, 120, 40, 10, 20, 5, 8)\n)\n\nd <- centers %>% \n  rowwise() %>% \n  summarise(id = id, x = x + rnorm(n, sd = 3), y = y + rnorm(n, sd = 3))\n\np <- ggplot(d, aes(x, y, colour = id)) + geom_point()\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/data-1.png){width=672}\n:::\n:::\n\n\nBy using `n()`, we can focus on the large groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  gghighlight(n() >= 100, use_direct_label = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/n-1.png){width=672}\n:::\n:::\n\n\nOr small groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  gghighlight(n() < 10, use_direct_label = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/n2-1.png){width=672}\n:::\n:::\n\n\nYou can also use `n()` as a [non-logical predicate](https://yutannihilation.github.io/gghighlight/articles/gghighlight.html#non-logical-predicate-1), whose values are used for sorting data and the top `max_highlight` of rows/groups are highlighted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Same result as above\np +\n  gghighlight(-n(), max_highlight = 2, use_direct_label = FALSE)\n```\n:::\n\n\n## To unhighlight or not to unhighlight...\n\nBy default, unhighlighted data are grayed out. `unhighlighted_params` is the option to override this. Now, you can even choose not to unhighlight at all by specifying explicit `NULL` to `colour` or `fill`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  gghighlight(n() < 10, use_direct_label = FALSE,\n              unhighlighted_params = list(colour = NULL))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unhighlight1-1.png){width=672}\n:::\n:::\n\n\nHmm..., but this is the very same plot as the original one. How can this be useful? Well, remember we still can tweak other parameters like `alpha`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  gghighlight(n() < 10, use_direct_label = FALSE,\n              unhighlighted_params = list(colour = NULL, alpha = 0.2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unhighlight2-1.png){width=672}\n:::\n:::\n\n\nThis plot doesn't look very nice in that the colors are a bit difficult to distinguish. This is mainly because I didn't come up with some nice data, but it's generally a tough job to tweak colors by `alpha` properly, so I don't recommend this much. But, hope you can find some good use case for this!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}